import streamlit as st
import Libs as glib
from langchain.callbacks import StreamlitCallbackHandler

# Configure the page
st.set_page_config(page_title="EduChatBot", page_icon="üìö", layout="wide")

# Apply custom styling to the page
st.markdown("""
    <style>
        .main {
            background-color: #f5f5f5;
        }
        .stButton button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 24px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 12px;
        }
        .stTextInput input {
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
        }
    </style>
""", unsafe_allow_html=True)

# Page title and description
st.title("T√¨m ki·∫øm ki·∫øn th·ª©c gi√°o d·ª•c")
st.markdown("### H·ªó tr·ª£ t√¨m ki·∫øm th√¥ng tin trong lƒ©nh v·ª±c gi√°o d·ª•c")

# Display sample questions as suggestions
st.markdown("#### G·ª£i √Ω c√¢u h·ªèi:")
col1, col2 = st.columns(2)

# Sample questions linked to backend
sample_questions_col1 = [
    "Nh·ªØng ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£?",
    "L√†m th·∫ø n√†o ƒë·ªÉ ph√°t tri·ªÉn k·ªπ nƒÉng t∆∞ duy ph·∫£n bi·ªán?"
]
sample_questions_col2 = [
    "C√°c tr∆∞·ªùng ƒë·∫°i h·ªçc h√†ng ƒë·∫ßu th·∫ø gi·ªõi?",
    "C√°ch l·ª±a ch·ªçn ng√†nh h·ªçc ph√π h·ª£p?"
]

# Create buttons for each sample question
for question in sample_questions_col1:
    with col1:
        if st.button(question):
            st.session_state.input_text = question

for question in sample_questions_col2:
    with col2:
        if st.button(question):
            st.session_state.input_text = question

# User input field for custom questions
st.markdown("#### Ho·∫∑c nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")
input_text = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y...", value=st.session_state.get('input_text', ''))

# Process the search and display results from backend
if input_text:
    st_callback = StreamlitCallbackHandler(st.container())
    response = glib.search(input_text, st_callback)
    
    # Display search results
    st.write(f"### K·∫øt qu·∫£ cho c√¢u h·ªèi: {input_text}")
    st.write(response.get("result", "Kh√¥ng c√≥ k·∫øt qu·∫£"))
    st.json(response)
